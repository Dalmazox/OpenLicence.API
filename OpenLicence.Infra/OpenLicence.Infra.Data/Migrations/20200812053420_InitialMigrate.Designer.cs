// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenLicence.Infra.Data.Context;

namespace OpenLicence.Infra.Data.Migrations
{
    [DbContext(typeof(OpenLicenceContext))]
    [Migration("20200812053420_InitialMigrate")]
    partial class InitialMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("OpenLicence.Domain.Entities.Enterprise", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnName("VARCHAR(14)")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("VARCHAR(128)")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("OpenLicence.Domain.Entities.Licence", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EnterpriseID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SoftwareID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Expires");

                    b.HasIndex("SoftwareID");

                    b.HasIndex("EnterpriseID", "SoftwareID")
                        .IsUnique();

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("OpenLicence.Domain.Entities.Software", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("VARCHAR(128)")
                        .HasColumnType("text");

                    b.Property<Guid>("SoftwareHouseID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SoftwareHouseID");

                    b.HasIndex("Name", "SoftwareHouseID")
                        .IsUnique();

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("OpenLicence.Domain.Entities.SoftwareHouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnName("VARCHAR(14)")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("VARCHAR(128)")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name");

                    b.ToTable("SoftwareHouses");
                });

            modelBuilder.Entity("OpenLicence.Domain.Entities.Licence", b =>
                {
                    b.HasOne("OpenLicence.Domain.Entities.Enterprise", "Enterprise")
                        .WithMany("Licences")
                        .HasForeignKey("EnterpriseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLicence.Domain.Entities.Software", "Software")
                        .WithMany("Licences")
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLicence.Domain.Entities.Software", b =>
                {
                    b.HasOne("OpenLicence.Domain.Entities.SoftwareHouse", "SoftwareHouse")
                        .WithMany("Softwares")
                        .HasForeignKey("SoftwareHouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
